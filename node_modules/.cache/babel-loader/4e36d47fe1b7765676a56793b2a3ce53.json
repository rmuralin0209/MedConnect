{"ast":null,"code":"import * as firebase from 'firebase';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAwF3vVC0EyminLjle-7tUKZKiYGtW9f3E\",\n  authDomain: \"medconnect-6fdaa.firebaseapp.com\",\n  databaseURL: \"https://medconnect-6fdaa.firebaseio.com\",\n  projectId: \"medconnect-6fdaa\",\n  storageBucket: \"medconnect-6fdaa.appspot.com\",\n  messagingSenderId: \"290600307048\",\n  appId: \"1:290600307048:web:6ef701461cacb76fdb6edd\",\n  measurementId: \"G-DHJ5G4291L\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nfunction signUp(userDetails) {\n  return new Promise((resolve, reject) => {\n    const {\n      userName,\n      userEmail,\n      userPassword,\n      userCity,\n      userCountry,\n      userGender,\n      userAge,\n      userProfileImage,\n      isRestaurant,\n      typeOfFood\n    } = userDetails;\n    firebase.auth().createUserWithEmailAndPassword(userDetails.userEmail, userDetails.userPassword).then(success => {\n      let user = firebase.auth().currentUser;\n      var uid;\n\n      if (user != null) {\n        uid = user.uid;\n      }\n\n      ;\n      firebase.storage().ref().child(`userProfileImage/${uid}/` + userProfileImage.name).put(userProfileImage).then(url => {\n        url.ref.getDownloadURL().then(success => {\n          const userProfileImageUrl = success;\n          console.log(userProfileImageUrl);\n          const userDetailsForDb = {\n            userName: userName,\n            userEmail: userEmail,\n            userPassword: userPassword,\n            userCity: userCity,\n            userCountry: userCountry,\n            userGender: userGender,\n            userAge: userAge,\n            userUid: uid,\n            isRestaurant: isRestaurant,\n            userProfileImageUrl: userProfileImageUrl,\n            typeOfFood: typeOfFood\n          };\n          db.collection(\"users\").doc(uid).set(userDetailsForDb).then(docRef => {\n            // console.log(\"Document written with ID: \", docRef.id);\n            if (userDetailsForDb.isRestaurant) {\n              userDetails.propsHistory.push(\"/user-profile\");\n              resolve(userDetailsForDb);\n            } else {\n              userDetails.propsHistory.push(\"/\");\n              resolve(userDetailsForDb);\n            }\n          }).catch(function (error) {\n            console.error(\"Error adding document: \", error);\n            reject(error);\n          });\n        }).catch(error => {\n          // Handle Errors here.\n          let errorCode = error.code;\n          let errorMessage = error.message;\n          console.log(\"Error in getDownloadURL function\", errorMessage);\n          reject(errorMessage);\n        });\n      }).catch(error => {\n        // Handle Errors here.\n        let errorCode = error.code;\n        let errorMessage = error.message;\n        console.log(\"Error in Image Uploading\", errorMessage);\n        reject(errorMessage);\n      });\n    }).catch(error => {\n      var errorMessage = error.message;\n      console.log(\"Error in Authentication\", errorMessage);\n      reject(errorMessage);\n    });\n  });\n}\n\nfunction logIn(userLoginDetails) {\n  return new Promise((resolve, reject) => {\n    const {\n      userLoginEmail,\n      userLoginPassword\n    } = userLoginDetails;\n    firebase.auth().signInWithEmailAndPassword(userLoginEmail, userLoginPassword).then(success => {\n      db.collection('users').doc(success.user.uid).get().then(snapshot => {\n        console.log(\"snapshot.data =>>\", snapshot.data().isRestaurant);\n\n        if (snapshot.data().isRestaurant) {\n          userLoginDetails.propsHistory.push(\"/user-profile\");\n          resolve(success);\n        } else {\n          userLoginDetails.propsHistory.push(\"/\");\n          resolve(success);\n        }\n      });\n    }).catch(error => {\n      // Handle Errors here.\n      // var errorCode = error.code;\n      var errorMessage = error.message;\n      reject(errorMessage);\n    });\n  });\n}\n\nfunction addItem(itemDetails) {\n  const {\n    contactName,\n    contactEmail,\n    itemImage\n  } = itemDetails;\n  return new Promise((resolve, reject) => {\n    let user = firebase.auth().currentUser;\n    var uid;\n\n    if (user != null) {\n      uid = user.uid;\n    }\n\n    ;\n    firebase.storage().ref().child(`itemImage/${uid}/` + itemImage.name).put(itemImage).then(url => {\n      url.ref.getDownloadURL().then(success => {\n        const itemImageUrl = success;\n        console.log(itemImageUrl);\n        const itemDetailsForDb = {\n          itemImageUrl: itemImageUrl,\n          contactEmail: contactEmail,\n          contactName: contactName\n        };\n        db.collection(\"users\").doc(uid).collection(\"menuItems\").add(itemDetailsForDb).then(docRef => {\n          resolve(\"Successfully added Contact\");\n        }).catch(function (error) {\n          let errorCode = error.code;\n          let errorMessage = error.message;\n          reject(errorMessage);\n        });\n      }).catch(error => {\n        let errorCode = error.code;\n        let errorMessage = error.message;\n        console.log(\"Error in getDownloadURL function\", errorCode);\n        console.log(\"Error in getDownloadURL function\", errorMessage);\n        reject(errorMessage);\n      });\n    }).catch(error => {\n      let errorCode = error.code;\n      let errorMessage = error.message;\n      console.log(\"Error in Image Uploading\", errorMessage);\n      reject(errorMessage);\n    });\n  });\n}\n\nexport default firebase;\nexport { signUp, logIn, addItem };","map":{"version":3,"sources":["/Users/rachanamn/Documents/Internship/medhacks2020/MedConnect/src/config/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","db","firestore","signUp","userDetails","Promise","resolve","reject","userName","userEmail","userPassword","userCity","userCountry","userGender","userAge","userProfileImage","isRestaurant","typeOfFood","auth","createUserWithEmailAndPassword","then","success","user","currentUser","uid","storage","ref","child","name","put","url","getDownloadURL","userProfileImageUrl","console","log","userDetailsForDb","userUid","collection","doc","set","docRef","propsHistory","push","catch","error","errorCode","code","errorMessage","message","logIn","userLoginDetails","userLoginEmail","userLoginPassword","signInWithEmailAndPassword","get","snapshot","data","addItem","itemDetails","contactName","contactEmail","itemImage","itemImageUrl","itemDetailsForDb","add"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\nimport 'firebase/firestore'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAwF3vVC0EyminLjle-7tUKZKiYGtW9f3E\",\n    authDomain: \"medconnect-6fdaa.firebaseapp.com\",\n    databaseURL: \"https://medconnect-6fdaa.firebaseio.com\",\n    projectId: \"medconnect-6fdaa\",\n    storageBucket: \"medconnect-6fdaa.appspot.com\",\n    messagingSenderId: \"290600307048\",\n    appId: \"1:290600307048:web:6ef701461cacb76fdb6edd\",\n    measurementId: \"G-DHJ5G4291L\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\n\nfunction signUp(userDetails) {\n    return new Promise((resolve, reject) => {\n        const { userName, userEmail, userPassword, userCity, userCountry, userGender, userAge, userProfileImage, isRestaurant, typeOfFood } = userDetails;\n        firebase.auth().createUserWithEmailAndPassword(userDetails.userEmail, userDetails.userPassword).then((success) => {\n            let user = firebase.auth().currentUser;\n            var uid;\n            if (user != null) {\n                uid = user.uid;\n            };\n            firebase.storage().ref().child(`userProfileImage/${uid}/` + userProfileImage.name).put(userProfileImage).then((url) => {\n                url.ref.getDownloadURL().then((success) => {\n                    const userProfileImageUrl = success\n                    console.log(userProfileImageUrl)\n                    const userDetailsForDb = {\n                        userName: userName,\n                        userEmail: userEmail,\n                        userPassword: userPassword,\n                        userCity: userCity,\n                        userCountry: userCountry,\n                        userGender: userGender,\n                        userAge: userAge,\n                        userUid: uid,\n                        isRestaurant: isRestaurant,\n                        userProfileImageUrl: userProfileImageUrl,\n                        typeOfFood: typeOfFood,\n                    }\n                    db.collection(\"users\").doc(uid).set(userDetailsForDb).then((docRef) => {\n                        // console.log(\"Document written with ID: \", docRef.id);\n                        if(userDetailsForDb.isRestaurant){\n                            userDetails.propsHistory.push(\"/user-profile\");\n                            resolve(userDetailsForDb)\n                        }else{\n                            userDetails.propsHistory.push(\"/\");\n                            resolve(userDetailsForDb)\n                        }\n                    }).catch(function (error) {\n                        console.error(\"Error adding document: \", error);\n                        reject(error)\n                    })\n                }).catch((error) => {\n                    // Handle Errors here.\n                    let errorCode = error.code;\n                    let errorMessage = error.message;\n                    console.log(\"Error in getDownloadURL function\", errorMessage);\n                    reject(errorMessage)\n                })\n            }).catch((error) => {\n                // Handle Errors here.\n                let errorCode = error.code;\n                let errorMessage = error.message;\n                console.log(\"Error in Image Uploading\", errorMessage);\n                reject(errorMessage)\n            })\n        }).catch((error) => {\n            var errorMessage = error.message;\n            console.log(\"Error in Authentication\", errorMessage);\n            reject(errorMessage)\n        })\n    })\n}\n\nfunction logIn(userLoginDetails) {\n    return new Promise((resolve, reject) => {\n        const { userLoginEmail, userLoginPassword } = userLoginDetails;\n        firebase.auth().signInWithEmailAndPassword(userLoginEmail, userLoginPassword).then((success) => {\n            db.collection('users').doc(success.user.uid).get().then((snapshot) => {\n                console.log(\"snapshot.data =>>\", snapshot.data().isRestaurant);\n                if(snapshot.data().isRestaurant){\n                    userLoginDetails.propsHistory.push(\"/user-profile\");\n                    resolve(success)\n                }else{\n                    userLoginDetails.propsHistory.push(\"/\");\n                    resolve(success)\n                }             \n            })\n        }).catch((error) => {\n            // Handle Errors here.\n            // var errorCode = error.code;\n            var errorMessage = error.message;\n            reject(errorMessage)\n        });\n\n    })\n}\n\nfunction addItem(itemDetails) {\n    const { contactName, contactEmail, itemImage } = itemDetails;\n    return new Promise((resolve, reject) => {\n        let user = firebase.auth().currentUser;\n        var uid;\n        if (user != null) {\n            uid = user.uid;\n        };\n        firebase.storage().ref().child(`itemImage/${uid}/` + itemImage.name).put(itemImage).then((url) => {\n            url.ref.getDownloadURL().then((success) => {\n                const itemImageUrl = success\n                console.log(itemImageUrl)\n                const itemDetailsForDb = {\n                   \n                    itemImageUrl: itemImageUrl,\n                    contactEmail: contactEmail,\n                    contactName: contactName,\n                }\n                db.collection(\"users\").doc(uid).collection(\"menuItems\").add(itemDetailsForDb).then((docRef) => {\n\n                    resolve(\"Successfully added Contact\")\n                }).catch(function (error) {\n                    let errorCode = error.code;\n                    let errorMessage = error.message;\n                    reject(errorMessage)\n\n                })\n            }).catch((error) => {\n                let errorCode = error.code;\n                let errorMessage = error.message;\n                console.log(\"Error in getDownloadURL function\", errorCode);\n                console.log(\"Error in getDownloadURL function\", errorMessage);\n                reject(errorMessage)\n            })\n        }).catch((error) => {\n            let errorCode = error.code;\n            let errorMessage = error.message;\n            console.log(\"Error in Image Uploading\", errorMessage);\n            reject(errorMessage)\n        })\n        \n    })\n }\n \n \n\n\nexport default firebase;\nexport {\n    signUp,\n    logIn,\n    addItem,\n\n}"]},"metadata":{},"sourceType":"module"}